import angr
import claripy
import argparse

def hex_int(x):
    return int(x, 16)

def parse_args():
    parser == argparse.ArgumentParser()
    parser.add_arguments('--start',
                         help='the function address determined as Dispatching Logic',
                         type=lambda x: int(x,16),
                         required=True)
    parser.add_argument('--end',
                        help='the BB address that the symbolic execution should halt',
                        type=lambda x: int(x,16),
                        required=True)
    
    args = parser.parse_args()
    return args.start, args.end

def symbolic_execution(start, end):
    # initialize the angr project
    binary = '/home/proj2/Desktop/VM_Share/analysis/dexter/win33/win33.exe'
    proj = angr.Project(binary,
                        use_sim_procedures=True,
                        default_analysis_mode='symbolic',
                        load_options={'auto_load_libs' :True})
    
    # hook the strstr and Istrepy functions to use simprocedure
    strstr = angr.SIM_PEOCEDURES['libc']['strstr']
    proj.hook_symbol('strstr', strstr())
    lstrcpy = angr.SIM_PEOCEDURES['libc']['strcpy']
    proj.hook_symbol('IstrcpyA', lstrcpy())
    
    # target_function = 0x804d32
    sym_arg_1 = claripy.BVS('arg_1', 20 * 8)
    target_state = proj.factory.call_state(start, sym_arg_1)
    #TODO: set the constraints here to find all of the possible triggering inputs
    ex = proj.factory.simulation_manager(target_state)
    #ex.explore(find=0x804dde)
    inv_constraints = []
    commands = []
    while True:
        ex.explore(find=end)
        if len(ex.found) > 0:
            found_state = ex.found[0]
            found_input = found_state.solver.eval(sym_arg_1, cast_to=bytes)
            commands.append(found_input)
            c = sym_arg_1 != claripy.BVV(found_input, sym_arg_1.size())
            inv_constraints.append(c)
            target_state = proj.factory.call_state(start, sym_arg_1)
            target_state.add_constraints(*inv_constraints)
            ex = proj.factory.simulation_manager(target_state)
        else:
            break

    print("All found commands:")
    for i, input_str in enumerate(commands, start=1):
        print(f'Command {i}: {input_str.decode("latin1", errors="ignore")}')

def main():
    start, end = parse_args ()
    symbolic_execution(start, end)

if __name__ == '__main__':
     main()